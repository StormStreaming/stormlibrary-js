import { IPlayer } from "../player/IPlayer";
import { IWebRTC } from "../player/IWebRTC";
import { IStreamer } from "./IStreamer";
import { StormLibrary } from "../StormLibrary";
import { VideoContainer } from "../player/VideoContainer";
import { LibraryState } from "../player/enum/LibraryState";
import { PlayerType } from "../player/enum/PlayerTypes";
export declare class WebRTCStreamer implements IPlayer, IWebRTC, IStreamer {
    private readonly LOG_ACTIVITY;
    private main;
    private video;
    private mungeSDP;
    private soundMeter;
    private peerConnection;
    private peerConnectionConfig;
    private connection;
    private statusConnection;
    private selectedCamera;
    private selectedMicrophone;
    private isMicrophoneMuted;
    private cameraList;
    private microphoneList;
    private stream;
    private isPublishing;
    private constraints;
    private streamInfo;
    private userData;
    protected streamerState: LibraryState;
    private logger;
    private failedAttemps;
    private lastTimestamp;
    private lastCheckedTimestamp;
    private flowCheckInterval;
    private noTimestampProgress;
    private lastCameraChangeTime;
    constructor(main: StormLibrary, video: VideoContainer);
    isInSeekMode(): boolean;
    setSeekValue(newValue: number): void;
    seek(time: number): boolean;
    getCurrentQuality(): string;
    addSource(sourceItem: any, addAndPlay: boolean): boolean;
    setQuality(sourName: string): boolean;
    getCurrentSource(): void;
    togglePlay(): void;
    start(): void;
    onStreamPublished(): void;
    onStreamUnpublished(): void;
    onStreamNameInUse(): void;
    onSocketOpen(event: any): void;
    private onConnectionStateChange;
    private onDescriptionSuccess;
    private onDescriptionError;
    onSocketClose(event: any): void;
    onSocketMessage(event: any): void;
    onSocketError(event: any, shouldReconnect: boolean, reconnectTime: number): void;
    onAllServersFailed(): void;
    private onIceCandidate;
    private onUserMediaSuccess;
    onUserMediaError(error: any): void;
    onWebRTCError(error: any, self: WebRTCStreamer): void;
    getDevices(): any;
    onVideoPlay(): void;
    onVideoPause(): void;
    onVideoStop(): void;
    onVolumeChange(event: any): void;
    onVideoMetadata(event: any): void;
    onTimeUpdate(event: any): void;
    selectCamera(deviceID: string): void;
    selectMicrophone(deviceID: string): void;
    muteMicrophone(microphoneState: boolean): void;
    getIfMicrophoneMuted(): boolean;
    toggleCamera(): void;
    private closeStream;
    onSoundMeter(high: number, low: number): void;
    private ifRequireInteraction;
    getStreamerState(): LibraryState;
    getVideoContainer(): VideoContainer;
    restart(): void;
    stop(): void;
    destroy(force: boolean): void;
    getPlaybackStatus(): string;
    isPlaying(): boolean;
    pause(): void;
    play(force: boolean): void;
    selectSource(sourceItem: any): void;
    addStreamSource(sourceItem: any, addAndPlay: boolean): boolean;
    getAbsoluteTime(): number;
    getTime(): number;
    getPlayerType(): PlayerType;
}
