import { StormLibrary } from "../StormLibrary";
import { StormConnection } from "../network/StormConnection";
import { IPlayer } from "./IPlayer";
import { ISourceItem } from "../model/ISourceItem";
import { PlaybackState } from "./enum/PlaybackState";
export declare class PlaybackController {
    private readonly MSE_ENABLED;
    private readonly HLS_ENABLED;
    private readonly main;
    private readonly logger;
    private connection;
    private player;
    private selectedSource;
    private playbackState;
    private previousPlaybackState;
    private streamState;
    private tabHidden;
    private wasPausedByUser;
    private wasFreezed;
    private wasPlayingBeforeFreeze;
    private lastSelectedBitrate;
    private command;
    private absoluteStreamTime;
    constructor(main: StormLibrary);
    start(): boolean;
    playCommand(): boolean;
    play(): boolean;
    pauseCommand(): boolean;
    pause(): boolean;
    togglePlay(): boolean;
    isPlaying(): boolean;
    stopCommand(): boolean;
    stop(): boolean;
    mute(): boolean;
    unmute(): boolean;
    toggleMute(): boolean;
    setVolume(value: number): boolean;
    getVolume(): number;
    selectPlayer(source: ISourceItem): IPlayer | null;
    isMute(): boolean;
    restart(): boolean;
    reinitialize(): void;
    selectSource(): ISourceItem | null;
    getPlaybackState(): PlaybackState;
    getStreamState(): PlaybackState;
    setPlaybackState(newState: PlaybackState): void;
    getIfPausedbyUser(): boolean;
    getConnection(): StormConnection;
    switchSource(sourceLabel: string): boolean;
    getAbsoluteStreamTime(): number;
    setCurrentSource(source: ISourceItem): void;
    setCommand(newCommand: string): void;
    isTabHidden(): boolean;
    destroy(): void;
}
