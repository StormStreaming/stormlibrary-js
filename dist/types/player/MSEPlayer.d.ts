import { IPlayer } from "./IPlayer";
import { AbstractPlayer } from "./AbstractPlayer";
import { StormLibrary } from "../StormLibrary";
import { PlaybackController } from "./PlaybackController";
import { StormMetaDataItem } from "../model/StormMetaDataItem";
export declare class MSEPlayer extends AbstractPlayer implements IPlayer {
    private mediaSource;
    private sourceBuffer;
    private videoObject;
    private playbackController;
    private segmentsQueue;
    private acceptNewSegments;
    private playbackActive;
    private shouldFlushData;
    private bufferStartTime;
    private bufferEndTime;
    private addingSegments;
    private latencyReportTimeCycle;
    constructor(main: StormLibrary, playbackController: PlaybackController);
    start(): void;
    onMetaData(metadata: StormMetaDataItem): void;
    onMediaSourceOpen(): void;
    appendSourceBuffer(): void;
    private checkVideoBuffer;
    timerEvent(): void;
    private getVideoBufferSize;
    pushData(data: any): void;
    play(): void;
    pause(): void;
    stop(): void;
    getAbsoluteTime(): number;
    getTime(): number;
    isPlaying(): boolean;
    onVideoPause(): void;
    onVideoPlay(): void;
    onVideoStop(): void;
    restart(): void;
    seek(time: number): boolean;
    setURL(url: string): void;
    private flushVideoCache;
    destroy(): void;
}
